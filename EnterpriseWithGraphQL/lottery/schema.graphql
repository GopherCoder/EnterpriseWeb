type Query {
    ping(hello: String!) : Ping
    admin(id: ID!): Admin
    address(adminId: ID!): [Address]
    lotteries(ownerId: ID!): [Lottery]
    lottery(id: ID!): Lottery
    involvements(adminId: ID!): [Lottery]
}

type Mutation {
    login(phone: String!,password:String!): Admin!
    sign(phone: String!, password: String!): Admin!

    createAddress(adminId: ID!, detail: String): Address
    updateAddress(adminID: ID!, detail: String): Address

    createLottery(levels: [Level]!, deadline: DateTime!,winnerConditionId: ID!,lotteryClass: LevelClass,limit: Int): Lottery!
    updatedLottery(name:String!, limit: Int): Lottery
    takePartIn(lottertId:ID!, adminId:ID): Boolean



}

type Ping {
    data: String
    code: Int
}

type Admin {
    id: ID!
    name: String!
    phone: String!
    token: String!
}

type Address {
    id: ID!
    detail: String
    adminId: ID!
    adminName: String!
}

enum LotteryClass {
    NORMAL
    JOKE
    HIGH
    HOMEPAGE
    LUCKY
}

type Lottery {
    id: ID!
    deadline: String
    levels: [Level]!
    class: String
    number: Int
    limit: Int
    WinnerLotteryName: String
    adminName: String

}

scalar DateTime

type Level {
    id: ID!
    imageUrl: String!
    name: String!
    number: Int
    class: LevelClass
}

enum LevelClass {
    FIRST
    SECOND
    THIRD
    FOURTH
    FIFTH
    SIXTH
}


type WinnerLottery {
    id: ID!
    description: String!
    class: WinnerCondition
}

enum WinnerCondition {
    TIMELEVEL
    PERSONLEVEL
    NOWLEVEL
}

